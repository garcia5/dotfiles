#!/bin/zsh
export RED='\033[0;31m'
export GREEN='\033[0;32m'
export YELLOW='\033[0;33m'
export BLUE='\033[0;34m'
export NC='\033[0m' # No Color

join-lines() {
  local item
  while read item; do
    echo -n "${(q)item} "
  done
}

# Git
cg () {
    is-git-repo || { echo 'Not in git repo'; return 0 }
    cd $(git rev-parse --show-toplevel)
}

is-git-repo() {
    git rev-parse HEAD > /dev/null 2>&1
}

gpush() {
    is-git-repo || { echo 'Not in git repo'; return 0 }

    cur_branch=$(git branch --show-current)
    has_remote=$(git branch -r --list "origin/$cur_branch")
    if [[ $has_remote ]]; then
        git push "$@"
    else
        echo "No remote branch found, creating one"
        git push --set-upstream origin "$cur_branch" "$@"
    fi
}

# CD helpers
function cdp() {
    cd "${HOME}/Projects/${1}"
}
compdef '_path_files -/ -W $HOME/Projects' cdp
function cdw() {
    cd "${HOME}/work/${1}"
}
compdef '_path_files -/ -W $HOME/work' cdw

# send keys to all visible wezterm panes
ws() {
    local cmd="$@"

    if [[ -z "$cmd" ]]; then
        return
    fi

    local wez_list="$(wezterm cli list --format json)"
    local cur_pane_id="$WEZTERM_PANE"

    # get current tab
    local cur_tab_id="$(echo $wez_list | jq -r --arg PANE $WEZTERM_PANE '.[] | select(.pane_id==($PANE | tonumber)).tab_id')"
    # get all panes in current tab
    local cur_tab_panes="$(echo $wez_list | jq -r --arg TAB $cur_tab_id '.[] | select(.tab_id==($TAB | tonumber)).pane_id')"

    for pane_id in $(echo $cur_tab_panes); do
        echo "${cmd}" | wezterm cli send-text --no-paste --pane-id "${pane_id}"
    done
}

# update all panes in current tab to the given directory
cda() {
    local target_dir="$1"
    if [[ -z "${target_dir}" ]]; then
        target_dir="$HOME"
    fi

    ws "cd ${target_dir}"
}
compdef '_path_files -/' cda

# FZF
zle -N ctrl-t-widget
ctrl-t-widget() {
    local result=''
    # If the current command is 'git add ', 'git restore ', or 'git checkout ' fuzzy find changed files
    if [[ $LBUFFER =~ '^git (add|restore|checkout|stash) ' ]]; then
        result=$(fzf-git-changed | join-lines)
    # Find only '.spec' files
    elif [[ $LBUFFER =~ '^(yarn|pnpm) test ' ]]; then
        result=$(fzf-js-test | join-lines)
    elif [[ $LBUFFER =~ 'pytest' ]]; then
        result=$(fzf-pytest | join-lines)
    # Otherwise do default and fuzzy search all files
    else
        result=$(fzf-ctrl-t | join-lines)
    fi
    zle reset-prompt
    LBUFFER+=$result
}
bindkey '' ctrl-t-widget

fzf-ctrl-t() {
    local cmd='fd -tf'
    local fzf_cmd="fzf \
        --scheme path \
        --list-label 'Files' \
        --preview 'bat --color=always --style=numbers,changes {}' \
        --bind 'enter:execute(echo {q})+accept'"
    eval "$cmd" | eval "$fzf_cmd"
}

fzf-js-test() {
    local cmd="rg -n -m 1 'describe' --glob '*.spec.ts' --line-number --no-heading"
    local fzf_cmd="fzf \
        --multi \
        --scheme path \
        --delimiter : \
        --nth 1 \
        --list-label='Test Files' \
        --header 'ctrl-f: All files | ctrl-g Test files' \
        --bind 'ctrl-f:change-list-label(Files)+reload($FZF_DEFAULT_COMMAND)' \
        --bind 'ctrl-g:change-list-label(Test Files)+reload($cmd)' \
        --preview 'bat --color=always --style=plain --highlight-line={2} {1}'"
    eval "$cmd" | "$fzf_cmd" | cut -d: -f1
}

fzf-pytest() {
    local cmd="fd -tf -g 'test_*.py'"
    eval "$cmd" |
    fzf \
        --multi \
        --scheme path \
        --header 'ctrl-f: All files | ctrl-g Test files' \
        --bind "ctrl-f:change-list-label(Files)+reload($FZF_DEFAULT_COMMAND)" \
        --bind "ctrl-g:change-list-label(Test Files)+reload($cmd)" \
        --list-label "Test Files" \
        --preview "bat --color=always {}" |
    cut -d: -f1
}

fzf-git-checkout() {
    is-git-repo || { echo 'Not in git repo'; return 0 }

    # pass args straight to git-checkout if provided
    arg=$1
    if [[ -n $arg ]]; then
        git switch "$@"
        return
    fi

    local git_cmd="git branch --color=always --sort=-committerdate"
    local format="grep -v HEAD | sed 's/^..//' | sed -r 's,remotes/[A-Za-z0-9_-]*/,,' | cut -d' ' -f1"
    eval "$git_cmd --all | $format" |
    fzf \
        --ansi \
        --header "ctrl-a: checkout -b | ctrl-t: checkout --track | ctrl-r: All branches | ctrl-l: Local branches" \
        --bind "enter:execute(git switch {..})+accept" \
        --bind "ctrl-a:execute(git switch -c {q})+accept" \
        --bind "ctrl-t:execute(git switch --track {..})+accept" \
        --bind "ctrl-r:reload($git_cmd --all | $format)+change-list-label(Branches)" \
        --bind "ctrl-l:reload($git_cmd | $format)+change-list-label(Branches (local))" \
        --list-label "Git Braches" \
        --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" {}'
}

zle -N git-commit-widget
fzf-git-commits() {
    is-git-repo || { echo 'Not in git repo'; return 0 }

    cmd="git log --date-order --abbrev-commit --oneline --decorate --color=always"
    diff_cmd="git show --color=always --format=medium --stat -p {1} | fzf-delta"
    diffview_cmd='nvim -c DiffviewOpen {1}'
    eval "$cmd" |
    fzf \
        --ansi \
        --multi \
        --scheme 'history' \
        --list-label "Commits" \
        --header "Ctrl-a: open in delta | Ctrl-t: open in nvim" \
        --bind "ctrl-a:execute($diff_cmd)" \
        --bind "ctrl-t:execute($diffview_cmd)+abort" \
        --preview "$diff_cmd" |
    cut -d' ' -f1
}

git-commit-widget() {
    result=$(fzf-git-commits | join-lines)
    zle reset-prompt
    LBUFFER+=$result
}
bindkey '' git-commit-widget

zle -N git-branch-widget
fzf-git-branch() {
    is-git-repo || { echo 'Not in git repo'; return 0 }
    local prompt="${1:-Branches}"
    local git_cmd="git branch --color=always --sort=-committerdate"
    local format="grep -v HEAD | sed 's/^..//' | sed 's,remotes/,,' | cut -d' ' -f1"

    eval "$git_cmd | $format" |
    fzf \
        --ansi \
        --multi \
        --list-label "${prompt}" \
        --header "ctrl-a: All branches | ctrl-l: Local branches" \
        --bind "ctrl-a:reload($git_cmd --all | $format)+change-list-label(Branches (all))" \
        --bind "ctrl-l:reload($git_cmd | $format)+change-list-label(Branches)" \
        --preview 'git log --oneline --graph --date=short --color=always --pretty="format:%C(auto)%cd %h%d %s" {}'
}
git-branch-widget() {
    result=$(fzf-git-branch | join-lines)
    zle reset-prompt
    LBUFFER+=$result
}
bindkey '' git-branch-widget

fzf-git-changed() {
    cmd="git -c color.status=always status --short"
    diff_cmd="delta-git-diff {}"
    bat_cmd="bat --color=always {}"

    eval "$cmd" |
    fzf \
        --multi \
        --ansi \
        --scheme path \
        --header 'ctrl-f: All files | ctrl-g: Changed files' \
        --bind "ctrl-f:change-list-label(Files)+change-preview($bat_cmd)+reload($FZF_DEFAULT_COMMAND)" \
        --bind "ctrl-g:change-list-label(Changed Files)+change-preview($diff_cmd)+reload($cmd)" \
        --list-label "Changed Files" \
        --preview 'delta-git-diff {..}' |
    sed 's/.* //'
}

zle -N fzf-ls-widget
fzf-ls() {
    file_preview="bat --color=always --line-range=:40 --style=numbers,changes {}"
    dir_preview="eza --color=always -T --level 2 {}"

    fd -tf |
    fzf \
        --ansi \
        --multi \
        --scheme path \
        --header "ctrl-d: Directories / ctrl-f: Files" \
        --bind "ctrl-d:change-list-label(Directories)+reload(fd -td)+change-preview(${dir_preview})" \
        --bind "ctrl-f:change-list-label(Files)+reload(fd -tf)+change-preview(${file_preview})" \
        --preview "${file_preview}"\
        --list-label "Files"
}
fzf-ls-widget() {
    result=$(fzf-ls | join-lines)
    zle reset-prompt
    LBUFFER+=$result
}
bindkey '' fzf-ls-widget

fzf-cd() {
    fd -td -H -E '*.git' |
    fzf \
        --ansi \
        --no-multi \
        --preview='eza -hal {..}' \
        --list-label "Directories"
}

# Others
source-envfile() {
    set -a
    source "$1"
    set +a
}
